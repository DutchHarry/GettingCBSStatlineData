# Getting CBS Statline data

# 1 getting the list of tables
$url = "https://opendata.cbs.nl/ODataCatalog/Tables"
$a = Invoke-Webrequest -uri $url
# quick and dirty dissect, leaving a few columns with content 'System.Xml.XmlElement'
([xml]$a.content).feed.entry.content.properties | ConvertTo-Csv -NoTypeInformation -Delimiter "," | Set-Content -Path "s:\_ue\20200320 cbs tables test 1.csv" -Encoding UTF8
# getting some other relevant data from the set
([xml]$a.content).feed.entry.content.properties | %{
$_.Identifier+"|"+$_.ID."#text"+"|"+$_.Modified."#text"+"|"+$_.MetaDataModified."#text"+"|"+$_.RecordCount."#text"+"|"+$_.ColumnCount."#text"+"|CRLF"
} | Set-Content -Path "s:\_ue\20200320 cbs tables test 2.csv" -Encoding UTF8
# getting the ShortDescription (note: data is in the #text column, startign with a CRLF)
([xml]$a.content).feed.entry.content.properties.ShortDescription | ConvertTo-Csv -NoTypeInformation -Delimiter "," | Set-Content -Path "s:\_ue\20200320 cbs tables test 3.csv" -Encoding UTF8
# basically you can combine these three files in Excel to have all relevant data on the available tables.
# note that the 2nd one has pipe '|' delimiter, som import via Dtat->From Text->etc.

<#
Automated download of the actual tables is a bit more complicated.
It cannot be done with IE, thus NOT like this:

$url = "https://opendata.cbs.nl/portal.html?tableId=83599NED"
$ie = New-Object -com InternetExplorer.Application 
$ie.visible=$true
$ie.navigate($url) 
while($ie.ReadyState -ne 4) {start-sleep -m 100} 

# gives correct click
$ie.document.body.getElementsBytagName("a")[8].Click()
while($ie.ReadyState -ne 4) {start-sleep -m 100} 
# gives correct download
$ie.document.body.getElementsByClassName("cbs-btn")[0].Click()
while($ie.ReadyState -ne 4) {start-sleep -m 100} 

# but now your stuck with the downloadbar in IE which you cannot access via the DOM object.
# tried with
$wshell = new-object -com wscript.shell
Start-Sleep -seconds 3
$wshell.AppActivate("Internet Explorer")
Start-Sleep -seconds 3
$wshell.sendkeys('%N%S')  # jumps top Open button and saves
Start-Sleep -seconds 3
$wshell.AppActivate("Internet Explorer")
Start-Sleep -seconds 3

# but still stuck with the download bar ....

#>

# Selenium and Chrome browser to the rescue
# newest version didn't work, thus ...
# assume you have Chrome browser already installed
Install-Module -Name Selenium -RequiredVersion 1.2 
$Driver = Start-SeChrome
#$Driver = Start-SeInternetExplorer
#$Driver = Start-SeFirefox
$url = "https://opendata.cbs.nl/portal.html?tableId=83599NED"
Enter-SeUrl -Driver $Driver -Url $url
# you have to figure out it's the 9th one (at time of construction) and since 0 is the first thus 8
(Find-SeElement -Driver $Driver -TagName 'a')[8] | Invoke-SeClick
# the 1st one, other is JSON
(Find-SeElement -Driver $Driver -ClassName 'cbs-btn')[0] | Invoke-SeClick
# now your CSV file is in the Chrome download directory
# and you can send another url to chrome

